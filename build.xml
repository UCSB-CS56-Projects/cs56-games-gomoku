<?xml version="1.0" encoding="utf-8"?>
<project default="compile">

  <!-- 
  build.xml
  name: Eric Huang for CS56, S13
  edited by: Madhu Kannan, Colin Garrett for CS56, F16
  -->

  <property environment="env"/> <!-- load the environment variables --> 
  <property name="webRoot" value="${env.HOME}/public_html/cs56" />
  <property name="webBaseUrl" value="http://www.cs.ucsb.edu/~${env.USER}/cs56" />

  <property name="course" value="CS56" />
  <property name="quarter" value="F16" />
  <property name="mainClass" value="edu.ucsb.cs56.projects.games.gomoku.Viewer" />
  <property name="origMainClass" value="edu.ucsb.cs56.projects.games.gomoku.GomokuOrig" />
  
  <property name="projectName" value="${course}_${quarter}" />
  
  <property name="projectPath" 
	value="edu/ucsb/${course}/projects/games/gomoku" />
  
  <property name="javadocDest" value="${webRoot}/${projectPath}/javadoc" />
  <property name="javadocURL" value="${webBaseUrl}/${projectPath}/javadoc" />
  <property name="javadocLink" value="https://docs.oracle.com/javase/8/docs/api/" />
  
  <path id="project.class.path">
	<pathelement location="build"/>
	<pathelement location="lib/junit-4.8.2.jar"/>
  </path>
  
  <path id="project.class.path2">
	<pathelement location="lib/junit-4.8.2.jar"/>
  </path>

  <target name="compile" description="compile the code">
    <mkdir dir="build" />
    <javac srcdir="src" destdir="build" debug="true" debuglevel="lines,source"
		includeantruntime="false" >
		<classpath refid="project.class.path" />
    </javac>
  </target>

  <target name="run" depends="compile" description="run the code">
    <java classname="${mainClass}" classpath="build" 
      fork="true" > 
    </java>
  </target>

  <target name="runorig" depends="compile" description="run the code">
    <java classname="${origMainClass}" classpath="build" 
      fork="true" > 
    </java>
  </target>


  <target name="clean" description="clean up unnecessary directory">
    <delete failonerror="false" verbose="true">
      <fileset dir="build" includes="*.class"/>
    </delete>
    <delete dir="javadoc" quiet="true" />
    <delete dir="dist" quiet="true" />
    <!--
		<delete dir="download" quiet="true" />
    -->
    <delete dir="temp" quiet="true" />
  </target>


<property name="javadoc_absolute_path" location="javadoc"/>
  <property name="public_javadoc_absolute_path" location="javadoc"/>

  <target name="javadoc" depends="compile" description="generate javadoc">
    <delete>
      <fileset dir="javadoc" />
	   </delete>
	    <javadoc destdir="javadoc">
      <fileset dir="src" >
	<include name="**/*.java"/>
      </fileset>
      <classpath refid="project.class.path2" />
      <link href="https://docs.oracle.com/javase/8/docs/api/" />          
    </javadoc>
    <echo>
      javadoc written to file://${javadoc_absolute_path}/index.html
      copying to ${public_javadoc_absolute_path}/index.html
    </echo>
        <delete quiet="true">
      <fileset dir="${public_javadoc_absolute_path}" />    
    </delete>
    <mkdir dir="${public_javadoc_absolute_path}" />
    <copy todir="${public_javadoc_absolute_path}">
      <fileset dir="javadoc" />      
    </copy>
    <echo>                                                                      
      javadoc copied to ${public_javadoc_absolute_path}/index.html
      TO PUBLISH: cd into that repo, then git add javadoc;
        git commit -m "update javadoc"; git push origin gh-pages
    </echo>
  </target>
  

<!-- <target name="javadoc" depends="compile" description="upload javadoc"> 
 
   <delete dir="javadoc" quiet="true" /> 
   <javadoc  destdir="javadoc" author="true" version="true" use="true" >  
      <fileset dir="src" includes="**/*.java"/>  
      <classpath refid="project.class.path2" />
      <link href="${javadocLink}" />
   </javadoc>-->

   <!-- delete the old javadoc -->
   <!--<delete quiet="true" dir="${javadocDest}" />-->

   <!-- copy everything you just made to the javadoc destination,
    and then make it readable --> 
 
  <!-- <copy todir="${javadocDest}" > 
     <fileset dir="javadoc"/> 
   </copy> -->
 
   <!-- Note: this only does the chmod command on the 
        javadoc subdirectory and its contents.  You MIGHT have to
	MANUALLY do the chmod on the parent directories.  However,
	you should only need to do that once. --> 
 
 <!-- <chmod dir="${javadocDest}" perm="755"  type="dir" includes="**" /> 
   <chmod dir="${javadocDest}" perm="755"  type="file" includes="**/*" /> 
   <echo>Javadoc deployed to ${javadocURL}</echo>-->
 
<!--</target>-->

 <target name="test" depends="compile" description="run JUnit tests">
   <junit haltonerror="no" haltonfailure="no">
     <classpath refid="project.class.path"/>
     <batchtest fork="yes">
       <fileset dir="src">
	 <include name="**/*Test.java"/>
       </fileset>
     </batchtest>
     <formatter type="brief" usefile="false" />
   </junit>
 </target>
 
 
</project>
